import { AttachmentBuilder, Colors, EmbedBuilder, SlashCommandBuilder, SlashCommandStringOption, SlashCommandSubcommandBuilder } from "discord.js";
import { Command } from "../classes/command";
import { CommandContext } from "../classes/commandContext";
import { Config, OpenAIChatCompletionResponse } from "../types";
import {readFileSync} from "fs"
import Centra from "centra";

const config: Config = JSON.parse(readFileSync("config.json", "utf-8"))

const command_data = new SlashCommandBuilder()
    .setName("chat")
    .setDMPermission(false)
    .setDescription(`Start chatting with the AI`)
    .addSubcommand(
        new SlashCommandSubcommandBuilder()
        .setName("single")
        .setDescription("Get a single response without the possibility to followup")
        .addStringOption(
            new SlashCommandStringOption()
            .setName("message")
            .setDescription("The message to send to the AI")
            .setRequired(true)
            .setMaxLength(config?.generation_parameters?.max_input_chars ?? 10000)
        )
    )
    .addSubcommand(
        new SlashCommandSubcommandBuilder()
        .setName("thread")
        .setDescription("Start a thread for chatting with ChatGPT")
        .addStringOption(
            new SlashCommandStringOption()
            .setName("message")
            .setDescription("The message to send to the AI")
            .setRequired(true)
            .setMaxLength(config?.generation_parameters?.max_input_chars ?? 10000)
        )
    )


export default class extends Command {
    constructor() {
        super({
            name: "chat_single",
            command_data: command_data.toJSON(),
            staff_only: true,
        })
    }

    override async run(ctx: CommandContext): Promise<any> {
        if(!ctx.is_staff && ctx.client.config.global_user_cooldown && ctx.client.cooldown.has(ctx.interaction.user.id)) return ctx.error({error: "You are currently on cooldown"})
        const message = ctx.interaction.options.getString("message", true)
        const messages = []

        if(ctx.client.config.generation_parameters?.system_instruction?.length) messages.push({role: "system", content: ctx.client.config.generation_parameters?.system_instruction})

        messages.push({
            role: "user",
            content: message
        })

        await ctx.interaction.deferReply()

        if(await ctx.client.checkIfPromptGetsFlagged(message)) return ctx.error({error: "Your message has been flagged to be violating OpenAIs TOS"})

        const openai_req = Centra(`https://api.openai.com/v1/chat/completions`, "POST")
        .body({
            model: "gpt-3.5-turbo",
            messages,
            temperature: ctx.client.config.generation_parameters?.temperature,
            top_p: ctx.client.config.generation_parameters?.top_p,
            frequency_penalty: ctx.client.config.generation_parameters?.frequency_penalty,
            presence_penalty: ctx.client.config.generation_parameters?.presence_penalty,
            max_tokens: ctx.client.config.generation_parameters?.max_tokens === -1 ? undefined : ctx.client.config.generation_parameters?.max_tokens,
            user: ctx.interaction.user.id
        }, "json")
        .header("Authorization", `Bearer ${process.env["OPENAI_TOKEN"]}`)

        const data: OpenAIChatCompletionResponse = await openai_req.send().then(res => res.json())

        if(ctx.client.config.dev) console.log(data)

        const description = `${message}\n\n**ChatGPT:**\n${data.choices[0]?.message.content ?? "Hi there"}`
        let payload = {}

        if(description.length < 4000) {
            const embed = new EmbedBuilder({
                author: {
                    name: ctx.interaction.user.tag,
                    icon_url: ctx.interaction.user.displayAvatarURL()
                },
                description,
                color: Colors.Green,
                footer: {text: "This text has been generated by OpenAIs GPT-3.5 Model"}
            })

            payload = {embeds: [embed]}
        } else {
            const attachment = new AttachmentBuilder(Buffer.from(`${ctx.interaction.user.tag}:\n${message}\n\nChatGPT:\n${data.choices[0]?.message.content ?? "Hi there"}\n\nThis response has been generated using OpenAIs GPT-3.5 model`), {name: `${data.id}.txt`})
            payload = {
                content: "Result attached below",
                files: [attachment]
            }
        }

        if(ctx.client.config.global_user_cooldown) ctx.client.cooldown.set(ctx.interaction.user.id, Date.now(), ctx.client.config.global_user_cooldown)
        const res = await ctx.interaction.editReply(payload)

        if(ctx.client.config.dev) {
            const devembed = new EmbedBuilder({
                title: "Dev",
                description: `**ID** \`${data.id}\`
                
**Prompt Tokens** ${data.usage.prompt_tokens}
**Completion Tokens** ${data.usage.completion_tokens}
**Total Tokens** ${data.usage.total_tokens}`,
                color: Colors.Red
            })
            await res.reply({
                embeds: [devembed]
            })
        }
    }
}