import { AttachmentBuilder, Colors, ComponentType, EmbedBuilder, InteractionEditReplyOptions } from "discord.js";
import { Component } from "../classes/component";
import { ComponentContext } from "../classes/componentContext";
import { ChatCompletionMessages } from "../types";


export default class extends Component {
    constructor() {
        super({
            name: "regenerate",
            staff_only: false,
            regex: /regenerate/
        })
    }

    override async run(ctx: ComponentContext<ComponentType.Button>): Promise<any> {
        if(!ctx.client.config.features?.regenerate_button && !ctx.can_staff_bypass) return ctx.error({error: "This action is disabled"})
        const interaction_message = ctx.interaction.message
        if(!ctx.is_staff && ctx.client.config.global_user_cooldown && ctx.client.cooldown.has(ctx.interaction.user.id)) return ctx.error({error: "You are currently on cooldown"})
        await ctx.interaction.deferUpdate()
        if(interaction_message.interaction?.user.id !== ctx.interaction.user.id) return;
        if(!interaction_message.embeds[0]?.description) return;
        const [message] = interaction_message.embeds[0]?.description.split("\n\n")
        if(!message?.length) return ctx.interaction.deferUpdate()
        const system_instruction_name = interaction_message.embeds[0]?.description.matchAll(/\*\*ChatGPT \((?<name>[A-Z a-z0-9_-]+)\)\:\*\*/g)?.next()?.value?.groups?.name ?? "default"
        const system_instruction = system_instruction_name === "default" ? ctx.client.config.generation_settings?.default_system_instruction : ctx.client.config.selectable_system_instructions?.find(i => i.name?.toLowerCase() === system_instruction_name)?.system_instruction
        
        const model_configuration_name = interaction_message.embeds[0]?.footer?.text.matchAll(/\((?<name>[A-Z a-z0-9_-]+)\)/g)?.next()?.value?.groups?.name
        if(!model_configuration_name) return ctx.error({error: "Unable to find model configuration"})
        const model_configuration = ctx.client.config.models?.[model_configuration_name]
        if(!model_configuration) return ctx.error({error: "Model configuration not found"})

        const messages: ChatCompletionMessages[] = []

        await interaction_message.react("⌛")

        if(system_instruction?.length) messages.push({role: "system", content: system_instruction})

        messages.push({
            role: "user",
            content: message
        })

        const data = await ctx.client.requestChatCompletion(messages, model_configuration, ctx.interaction.user.id, ctx.database).catch(console.error)
        if(!data) return ctx.error({error: "Something went wrong"})

        const description = `${message}\n\n**AI ChatBot (${system_instruction_name}):**\n${data.choices[0]?.message.content?.trim() ?? "Hi there"}`
        let payload: InteractionEditReplyOptions = {
            embeds: [],
            files: [],
            content: null
        }

        if(description.length < 4000) {
            const embed = new EmbedBuilder({
                author: {
                    name: ctx.interaction.user.username,
                    icon_url: ctx.interaction.user.displayAvatarURL()
                },
                description,
                color: Colors.Green,
                footer: {text: `This text has been generated by AI (${model_configuration_name})`}
            })

            payload.embeds = [embed]
        } else {
            const attachment = new AttachmentBuilder(Buffer.from(`${ctx.interaction.user.username}:\n${message}\n\nAI ChatBot (${system_instruction_name}):\n${data.choices[0]?.message.content?.trim() ?? "Hi there"}\n\nThis response has been generated using OpenAIs Chat Completion API`), {name: `${data.id}.txt`})
            payload.content = "Result attached below"
            payload.files = [attachment]
        }

        if(ctx.client.config.global_user_cooldown) ctx.client.cooldown.set(ctx.interaction.user.id, Date.now(), ctx.client.config.global_user_cooldown)
        await interaction_message.reactions.cache.get("⌛")?.remove()
        const res = await ctx.interaction.editReply(payload)

        if(ctx.client.config.dev_config?.enabled && ctx.client.config.dev_config.debug_discord_messages) {
            const devembed = new EmbedBuilder({
                title: "Dev",
                description: `**ID** \`${data.id}\`
                
**Prompt Tokens** ${data.usage.prompt_tokens}
**Completion Tokens** ${data.usage.completion_tokens}
**Total Tokens** ${data.usage.total_tokens}

**Model Configuration**
\`\`\`json
${JSON.stringify(model_configuration, null, 2)}
\`\`\`

**System Instruction**
${system_instruction ?? "NONE"}`,
                color: Colors.Red
            })
            await res.reply({
                embeds: [devembed]
            })
        }
    }
}